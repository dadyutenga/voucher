version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: wifi_voucher_db
    environment:
      POSTGRES_DB: wifi_voucher_db
      POSTGRES_USER: voucher_user
      POSTGRES_PASSWORD: voucher_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - voucher_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U voucher_user -d wifi_voucher_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management (optional)
  redis:
    image: redis:7-alpine
    container_name: wifi_voucher_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - voucher_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: wifi_voucher_app
    environment:
      - DATABASE_URL=postgresql://voucher_user:voucher_password@db:5432/wifi_voucher_db
      - REDIS_URL=redis://redis:6379/0
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SENDER_EMAIL=${SENDER_EMAIL}
      - STRIPE_API_KEY=${STRIPE_API_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=development
      - DEBUG=true
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - ./logs:/app/logs
    networks:
      - voucher_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: wifi_voucher_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - voucher_network
    depends_on:
      - app
    restart: unless-stopped

  # Database administration tool (optional)
  adminer:
    image: adminer:latest
    container_name: wifi_voucher_adminer
    ports:
      - "8080:8080"
    networks:
      - voucher_network
    depends_on:
      - db
    restart: unless-stopped
    profiles:
      - admin

volumes:
  postgres_data:
    name: wifi_voucher_postgres_data
  redis_data:
    name: wifi_voucher_redis_data

networks:
  voucher_network:
    name: wifi_voucher_network
    driver: bridge
